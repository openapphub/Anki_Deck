{
    "__type__": "Deck",
    "children": [
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0eabf8-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "故障异常",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"宕机\">宕机</h2>\n",
                        "<p>宕机，一般情况下指的就是计算机主机出现意外故障而死机。其次，一些服务器例如数据库死锁也可以称为宕机，一些服务器的某些服务挂掉了，就可以这么说。</p>\n"
                    ],
                    "guid": "jJF#/x+ZqO",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"coredump\">coredump</h2>\n",
                        "<p>当程序出错而异常中断时，OS会把程序工作的当前状态存储成一个coredunmp文件。通常情况下coredump文件包含了程序运行时的内存，寄存器状态，堆栈指针，内存管理信息等。</p>\n"
                    ],
                    "guid": "nfVTr(?hW+",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"缓存穿透击穿雪崩\">缓存穿透/击穿/雪崩</h2>\n",
                        "<p><strong>缓存穿透</strong>：缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。</p>\n<p><strong>缓存击穿</strong>：缓存击穿是指热点key在某个时间点过期的时候，而恰好在这个时间点对这个Key有大量的并发请求过来，从而大量的请求打到db。</p>\n<p><strong>缓存雪崩</strong>：缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。</p>\n<p>与缓存击穿不同的是：存击穿是热点key失效，缓存雪崩是大量的key同时失效。</p>\n"
                    ],
                    "guid": "B:eUD6}gTy",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"500501502503504505\">500/501/502/503/504/505</h2>\n",
                        "<p>500 Internal Server Error：内部服务错误，一般是服务器遇到意外情况，而无法完成请求。可能原因:</p>\n<p>1、程序错误，例如：ASP或者PHP语法错误；</p>\n<p>2、高并发导致，系统资源限制不能打开过多的文件所致。</p>\n<p>501 Not implemented：服务器不理解或不支持请求的HTTP请求。</p>\n<p>502 Bad Gateway：WEB服务器故障，可能是由于程序进程不够，请求的php-fpm已经执行，但是由于某种原因而没有执行完毕，最终导致php-fpm进程终止。可能原因：</p>\n<p>1、Nginx服务器，php-cgi进程数不够用；</p>\n<p>2、PHP执行时间过长；</p>\n<p>3、php-cgi进程死掉；</p>\n<p>503 Service Unavailable：服务器目前无法使用。系统维护服务器暂时的无法处理客户端的请求，这只是暂时状态。可以联系下服务器提供商。</p>\n<p>504 Gateway Timeout：服务器504错误表示超时，是指客户端所发出的请求没有到达网关，请求没有到可以执行的php-fpm，一般是与nginx.conf的配置有关。</p>\n<p>505 HTTP Version Not Supported：服务器不支持请求中所用的 HTTP 协议版本。（HTTP 版本不受支持）</p>\n<p>除了500错误可能是程序语言错误，其余的报错，都大概可以理解为服务器或者服务器配置出现问题。</p>\n"
                    ],
                    "guid": "J2M|>nS4C}",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"内存溢出内存泄漏\">内存溢出/内存泄漏</h2>\n",
                        "<p><strong>内存溢出</strong>：内存溢出（Out Of Memory）指程序申请内存时，没有足够的内存供申请者使用，或者说，给了你一块存储int类型数据的存储空间，但是你却存储long类型的数据，那么结果就是内存不够用，此时就会报错OOM,即所谓的内存溢出。</p>\n<p><strong>内存泄漏</strong>：内存泄漏（Memory Leak）指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n"
                    ],
                    "guid": "E7+R$-~a{}",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"句柄泄漏\">句柄泄漏</h2>\n",
                        "<p>句柄泄漏是进程在调用系统文件之后，没有释放已经打开的文件句柄。一般句柄泄漏后的现象是，机器变慢，CPU飙升，出现句柄泄漏的cgi或server的CPU使用率增加。</p>\n"
                    ],
                    "guid": "d0_pQIu`2e",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"死锁\">死锁</h2>\n",
                        "<p>死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都抑制处于阻塞状态并无法进行下去，此时称系统处于死锁状态或系统产生了死锁。</p>\n"
                    ],
                    "guid": "HCJj1SngM8",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"软中断硬中断\">软中断/硬中断</h2>\n",
                        "<p>硬中断：我们通常所说的中断指的是硬中断(hardirq)。</p>\n<p>主要是用来通知操作系统系统外设状态的变化。</p>\n<p>软中断：1、通常是硬中断服务程序对内核的中断；2、为了满足实时系统的要求，中断处理应该是越快越好。</p>\n<p>linux为了实现这个特点，当中断发生的时候，硬中断处理那些短时间就可以完成的工作，而将那些处理事件比较长的工作，放到中断之后来完成，也就是软中断(softirq)来完成。</p>\n"
                    ],
                    "guid": "sR0/XT(Qy7",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"毛刺\">毛刺</h2>\n",
                        "<p>在短暂的某一刻，服务器性能指标（如流量、磁盘IO、CPU使用率等）远大于该时刻前后时间段。毛刺的出现代表这服务器资源利用不均匀，不充分，容易诱发其他更严重的问题。</p>\n"
                    ],
                    "guid": "DaB#Ht%>Zf",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"重放攻击\">重放攻击</h2>\n",
                        "<p>攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。它是一种攻击类型，这种攻击会不断恶意或欺诈性地重复一个有效的数据传输，重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p>\n"
                    ],
                    "guid": "r(6]IPc{_x",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"网络孤岛\">网络孤岛</h2>\n",
                        "<p>网络孤岛指集群环境中，部分机器与整个集群失去网络连接，分裂为一个小集群并且发生数据不一致的状况。</p>\n"
                    ],
                    "guid": "HjqA%E;L&Q",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"数据倾斜\">数据倾斜</h2>\n",
                        "<p>对于集群系统，一般缓存是分布式的，即不同节点负责一定范围的缓存数据。我们把缓存数据分散度不够，导致大量的缓存数据集中到了一台或者几台服务节点上，称为数据倾斜。一般来说数据倾斜是由于负载均衡实施的效果不好引起的。</p>\n"
                    ],
                    "guid": "O%;U[@~xgh",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"脑裂\">脑裂</h2>\n",
                        "<p>脑裂是指在集群系统中，部分节点之间网络不可达而引起的系统分裂，不同分裂的小集群会按照各自的状态提供服务，原本的集群会同时存在不一致的反应，造成节点之间互相争抢资源，系统混乱，数据损坏。</p>\n"
                    ],
                    "guid": "1U!pAbj2]",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0ed8da-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "服务治理",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"微服务\">微服务</h2>\n",
                        "<p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通（通常是基于HTTP的Restful API).每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。</p>\n"
                    ],
                    "guid": "r>RLdy0sR_",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"服务发现\">服务发现</h2>\n",
                        "<p>服务发现是指使用一个注册中心来记录分布式系统中的全部服务的信息，以便其他服务能够快速的找到这些已注册的服务。服务发现是支撑大规模 SOA 和微服务架构的核心模块，它应该尽量做到高可用。</p>\n"
                    ],
                    "guid": "MJ~E^4?,|M",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"流量削峰\">流量削峰</h2>\n",
                        "<p>如果观看抽奖或秒杀系统的请求监控曲线，你就会发现这类系统在活动开放的时间段内会出现一个波峰，而在活动未开放时，系统的请求量、机器负载一般都是比较平稳的。为了节省机器资源，我们不可能时时都提供最大化的资源能力来支持短时间的高峰请求。所以需要使用一些技术手段，来削弱瞬时的请求高峰，让系统吞吐量在高峰请求下保持可控。削峰也可用于消除毛刺，使服务器资源利用更加均衡和充分。常见的削峰策略有队列，限频，分层过滤，多级缓存等。</p>\n"
                    ],
                    "guid": "M{-~j[xMZ)",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"版本兼容\">版本兼容</h2>\n",
                        "<p>在升级版本的过程中，需要考虑升级版本后，新的数据结构是否能够理解和解析旧数据，新修改的协议是否能够理解旧的协议以及做出预期内合适的处理。这就需要在服务设计过程中做好版本兼容。</p>\n"
                    ],
                    "guid": "F{9%hYt?8B",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"过载保护\">过载保护</h2>\n",
                        "<p>过载是指当前负载已经超过了系统的最大处理能力，过载的出现，会导致部分服务不可用，如果处置不当，极有可能引起服务完全不可用，乃至雪崩。过载保护正是针对这种异常情况做的措施，防止出现服务完全不可用的现象。</p>\n"
                    ],
                    "guid": "iGc+5!QlmB",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"服务熔断\">服务熔断</h2>\n",
                        "<p>服务熔断的作用类似于我们家用的保险丝，当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。</p>\n"
                    ],
                    "guid": "jcL[gC`zD<",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"服务降级\">服务降级</h2>\n",
                        "<p>服务降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。降级往往会指定不同的级别，面临不同的异常等级执行不同的处理。</p>\n<p>根据服务方式：可以拒接服务，可以延迟服务，也有时候可以随机服务。</p>\n<p>根据服务范围：可以砍掉某个功能，也可以砍掉某些模块。</p>\n<p>总之服务降级需要根据不同的业务需求采用不同的降级策略。主要的目的就是服务虽然有损但是总比没有好。</p>\n"
                    ],
                    "guid": "qHQ6E2v*tS",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"熔断vs降级\">熔断VS降级</h2>\n",
                        "<p>相同点：目标一致，都是从可用性和可靠性出发，为了防止系统崩溃；用户体验类似，最终都让用户体验到的是某些功能暂时不可用；</p>\n<p>不同点：触发原因不同，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</p>\n"
                    ],
                    "guid": "u~B&SmdNH+",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"服务限流\">服务限流</h2>\n",
                        "<p>限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。</p>\n"
                    ],
                    "guid": "M2,}k=LCT:",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"故障屏蔽\">故障屏蔽</h2>\n",
                        "<p>将故障机器从集群剔除，以保证新的请求不会分发到故障机器。</p>\n"
                    ],
                    "guid": "DCb#K#egE~",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0efd60-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "架构设计",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"高并发-high-concurrency\">高并发 (High Concurrency)</h2>\n",
                        "<p>由于分布式系统的问世，高并发（High Concurrency）通常是指通过设计保证系统能够同时并行处理很多请求。</p>\n<p>通俗来讲，高并发是指在同一个时间点，有很多用户同时的访问同一 API 接口或者 Url 地址。它经常会发生在有大活跃用户量，用户高聚集的业务场景中。</p>\n"
                    ],
                    "guid": "r(2Y4D(a_Z",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"高可用-high-availability\">高可用 (High Availability)</h2>\n",
                        "<p>高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，一个系统经过专门的设计，以减少停工时间，而保持其服务的高度可用性。</p>\n"
                    ],
                    "guid": "AIbrbwO^:V",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"读写分离\">读写分离</h2>\n",
                        "<p>为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。</p>\n"
                    ],
                    "guid": "JuACeD#g<p",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"冷备热备\">冷备/热备</h2>\n",
                        "<p><strong>冷备</strong>：两个服务器，一台运行，一台不运行做为备份。这样一旦运行的服务器宕机，就把备份的服务器运行起来。冷备的方案比较容易实现，但冷备的缺点是主机出现故障时备机不会自动接管，需要主动切换服务。</p>\n<p><strong>热备</strong>：即是通常所说的active/standby方式，服务器数据包括数据库数据同时往两台或多台服务器写。当active服务器出现故障的时候，通过软件诊测（一般是通过心跳诊断）将standby机器激活，保证应用在短时间内完全恢复正常使用。当一台服务器宕机后，自动切换到另一台备用机使用。</p>\n"
                    ],
                    "guid": "LWWr3(`kQa",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"异地多活\">异地多活</h2>\n",
                        "<p>异地多活一般是指在不同城市建立独立的数据中心，“活” 是相对于冷备份而言的，冷备份是备份全量数据，平时不支撑业务需求，只有在主机房出现故障的时候才会切换到备用机房，而多活，是指这些机房在日常的业务中也需要走流量，做业务支撑。</p>\n"
                    ],
                    "guid": "sOFh<BMX)1",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"负载均衡-load-balance\">负载均衡 (Load Balance)</h2>\n",
                        "<p>负载均衡，是对多台服务器进行流量分发的负载均衡服务。可在多个实例间自动分配应用程序的对外服务能力，通过消除单点故障提升应用系统的可用性，让您实现更高水平的应用程序容错能力，从而无缝提供分配应用程序流量所需的负载均衡容量，为您提供高效、稳定、安全的服务。</p>\n"
                    ],
                    "guid": "jqQ_1]g|4n",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"动静分离\">动静分离</h2>\n",
                        "<p>动静分离是指在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性。</p>\n"
                    ],
                    "guid": "Lm/*AJf`OW",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"集群\">集群</h2>\n",
                        "<p>单台服务器的并发承载能力总是有限的，当单台服务器处理能力达到性能瓶颈的时，将多台服务器组合起来提供服务，这种组合方式称之为集群，集群中每台服务器就叫做这个集群的一个“节点”，每个节点都能提供相同的服务，从而成倍的提升整个系统的并发处理能力。</p>\n"
                    ],
                    "guid": "mO3$rk7!0{",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"分布式\">分布式</h2>\n",
                        "<p>分布式系统就是将一个完整的系统按照业务功能拆分成很多独立的子系统，每个子系统就被称为“服务”，分布式系统将请求分拣和分发到不同的子系统，让不同的服务来处理不同的请求。在分布式系统中，子系统独立运行，它们之间通过网络通信连接起来实现数据互通和组合服务。</p>\n"
                    ],
                    "guid": "Axaj}t9!8i",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"cap理论\">CAP理论</h2>\n",
                        "<p>CAP理论，指的是在一个分布式系统中，Consistency(一致性)、Availability(可用性)、Partition Tolerance(分区容错性)，不能同时成立。</p>\n<p>一致性：它要求在同一时刻点，分布式系统中的所有数据备份都相同或者都处于同一状态。</p>\n<p>可用性：在系统集群的一部分节点宕机后，系统依然能够正确的响应用户的请求。</p>\n<p>分区容错性：系统能够容忍节点之间的网络通信的故障。</p>\n<p>简单的来说，在一个分布式系统中，最多能支持上面的两种属性。但显然既然是分布式注定我们是必然要进行分区，既然分区，我们就无法百分百避免分区的错误。因此，我们只能在一致性和可用性去作出选择。</p>\n<p>在分布式系统中，我们往往追求的是可用性，它的重要性比一致性要高，那么如何实现高可用，这里又有一个理论，就是 BASE 理论，它给 CAP 理论做了进一步的扩充。</p>\n"
                    ],
                    "guid": "LEpZSis}j%",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"base理论\">BASE理论</h2>\n",
                        "<p>BASE 理论指出：</p>\n<ul>\n<li>Basically Available（基本可用）</li>\n<li>Soft state（软状态）</li>\n<li>Eventually consistent（最终一致性）</li>\n</ul>\n<p>BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p>\n"
                    ],
                    "guid": "JhxXCIx8$$",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"水平扩展垂直扩展\">水平扩展/垂直扩展</h2>\n",
                        "<p>水平扩展 Scale Out通过增加更多的服务器或者程序实例来分散负载，从而提升存储能力和计算能力。</p>\n<p>垂直扩展 Scale Up 提升单机处理能力。</p>\n<p>垂直扩展的方式又有两种：</p>\n<p>（1）增强单机硬件性能，例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G;<br>（2）提升单机软件或者架构性能，例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间；</p>\n"
                    ],
                    "guid": "n-$LW,[lSw",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"平行扩容\">平行扩容</h2>\n",
                        "<p>与水平扩展类似。集群服务器中的节点均为平行对等节点，当需要扩容时，可以通过添加更多节点以提高集群的服务能力。一般来说服务器中关键路径（如服务器中的登录、支付、核心业务逻辑等）都需要支持运行时动态平行扩容。</p>\n"
                    ],
                    "guid": "e:6G!BNp(=",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"弹性扩容\">弹性扩容</h2>\n",
                        "<p>指对部署的集群进行动态在线扩容。弹性扩容系统可以根据实际业务环境按照一定策略自动地添加更多的节点（包括存储节点、计算节点、网络节点）来增加系统容量、提高系统性能或者增强系统可靠性，或者同时完成这三个目标。</p>\n"
                    ],
                    "guid": "wF0oYD(*&)",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"状态同步帧同步\">状态同步/帧同步</h2>\n",
                        "<p>状态同步：状态同步是指服务器负责计算全部的游戏逻辑，并且广播这些计算的结果，客户端仅仅负责发送玩家的操作，以及表现收到的游戏结果。</p>\n<p>特征：状态同步安全性高，逻辑更新方便，断线重连快，但是开发效率较低，网络流量随游戏复杂度增加，服务器需要承载更大压力。</p>\n<p>帧同步：服务端只转发消息，不做任何逻辑处理，各客户端每秒帧数一致，在每一帧都处理同样的输入数据。</p>\n<p>特征：帧同步需要保证系统在相同的输入下，要有相同的输出。帧同步开发效率高，流量消耗低而且稳定，对服务器的压力非常小。但是网络要求高，断线重连时间长，客户端计算压力大。</p>\n"
                    ],
                    "guid": "EQO.|0Rzi!",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0f251a-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "测试/发布",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"黑盒白盒测试\">黑盒/白盒测试</h2>\n",
                        "<p>黑盒测试不考虑程序内部结构和逻辑结构，主要是用来测试系统的功能是否满足需求规格说明书。一般会有一个输入值，一个输入值，和期望值做比较。</p>\n<p>白盒测试主要应用在单元测试阶段，主要是对代码级的测试，针对程序内部逻辑结构，测试手段有：语句覆盖、判定覆盖、条件覆盖、路径覆盖、条件组合覆盖</p>\n"
                    ],
                    "guid": "AID{?`IqSY",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"单元集成系统验收测试\">单元/集成/系统/验收测试</h2>\n",
                        "<p>软件测试一般分为 <code>4</code> 个阶段：单元测试、集成测试、系统测试、验收测试。</p>\n<p><strong>单元测试</strong>：单元测试是对软件中的最小可验证单元进行检查和验证，如一个模块、一个过程、一个方法等。单元测试粒度最小，一般由开发小组采用白盒方式来测试，主要测试单元是否符合“设计”。</p>\n<p><strong>集成测试</strong>：集成测试也叫做组装测试，通常在单元测试的基础上，将所有的程序模块进行有序的、递增的测试。集成测试界于单元测试和系统测试之间，起到“桥梁作用”，一般由开发小组采用白盒加黑盒的方式来测试，既验证“设计”，又验证“需求”。</p>\n<p><strong>系统测试</strong>：系统测试时将经过集成测试的软件，作为计算机系统的一部分，与系统中其他部分结合起来，在实际运行环境下进行一系列严格有效的测试，以发现软件潜在的问题，保证系统的正常运行。系统测试的粒度最大，一般由独立测试小组采用黑盒方式来测试，主要测试系统是否符合“需求规格说明书”。</p>\n<p><strong>验收测试</strong>：验收测试也称交付测试，是针对用户需求、业务流程进行的正式的测试，以确定系统是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统。验收测试与系统测试相似，主要区别是测试人员不同，验收测试由用户执行。</p>\n"
                    ],
                    "guid": "dbiFRpq$8R",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"回归测试\">回归测试</h2>\n",
                        "<p>当发现并修改缺陷后，或在软件中添加新的功能后，重新测试。用来检查被发现的缺陷是否被改正，并且所做的修改没有引发新的问题。</p>\n"
                    ],
                    "guid": "Js]#4eh@K}",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"冒烟测试\">冒烟测试</h2>\n",
                        "<p>这一术语源自硬件行业。对一个硬件或硬件组件进行更改或修复后，直接给设备加电。如果没有冒烟，则该组件就通过了测试。在软件中，“冒烟测试”这一术语描述的是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</p>\n<p>冒烟测试是在软件开发过程中的一种针对软件版本包的快速基本功能验证策略，是对软件基本功能进行确认验证的手段，并非对软件版本包的深入测试。</p>\n<p>比如：对于一个登录系统的冒烟测试，我们只需测试输入正确的用户名、密码，验证登录这一个核心功能点，至于输入框、特殊字符等，可以在冒烟测试之后进行。</p>\n"
                    ],
                    "guid": "np]y1eUJ!(",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"性能测试\">性能测试</h2>\n",
                        "<p>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。</p>\n<p>通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。</p>\n<p>压力测试是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。</p>\n"
                    ],
                    "guid": "Q4l_FW(&u,",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"基准测试\">基准测试</h2>\n",
                        "<p>基准测试（Benchmark）也是一种性能测试方式，用来测量机器的硬件最高实际运行性能，以及软件优化的性能提升效果, 同时也可以用来识别某段代码的CPU或者内存效率问题. 许多开发人员会用基准测试来测试不同的并发模式, 或者用基准测试来辅助配置工作池的数量, 以保证能最大化系统的吞吐量。</p>\n"
                    ],
                    "guid": "mQ:2T-pe8>",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"ab测试\">A/B测试</h2>\n",
                        "<p>A/B测试，是用两组及以上随机分配的、数量相似的样本进行对比，如果实验组和对比组的实验结果相比，在目标指标上具有统计显著性，那就可以说明实验组的功能可以导致你想要的结果，从而帮你验证假设或者做出产品决定。</p>\n"
                    ],
                    "guid": "kFD|:j,wbL",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"代码覆盖测试\">代码覆盖测试</h2>\n",
                        "<p>代码覆盖（Code coverage）是软件测试中的一种度量，描述程式中源代码被测试的比例和程度，所得比例称为代码覆盖率。在做单元测试时，代码覆盖率常常被拿来作为衡量测试好坏的指标，甚至，用代码覆盖率来考核测试任务完成情况，比如，代码覆盖率必须达到80%或 90%。于是乎，测试人员费尽心思设计案例覆盖代码。</p>\n"
                    ],
                    "guid": "yifTQ:/)I5",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"devprofatuat\">DEV/PRO/FAT/UAT</h2>\n",
                        "<p><strong>DEV</strong>（Development environment）：开发环境，用于开发人员调试使用，版本变化较大。</p>\n<p><strong>FAT</strong>（Feature Acceptance Test environment）：功能验收测试环境，用于软件测试人员测试使用。</p>\n<p><strong>UAT</strong>（User Acceptance Test environment）：用户验收测试环境，用于生产环境下的功能验证，可作为预发布环境。</p>\n<p><strong>PRO</strong>（Production environment）：生产环境，正式线上环境。</p>\n"
                    ],
                    "guid": "jm_o|q3!7C",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"灰度发布\">灰度发布</h2>\n",
                        "<p>灰度发布是指在升级版本过程中，通过分区控制，白名单控制等方式对一部分用户先升级产品特性，而其余用户则保持不变，当一段时间后升级产品特性的用户没有反馈问题，就逐步扩大范围，最终向所有用户开放新版本特性，灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、修改问题，以保证其影响度。</p>\n"
                    ],
                    "guid": "H0f#-SXi_s",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"回滚-rollback\">回滚 (Rollback)</h2>\n",
                        "<p>指的是程序或数据处理错误时，将程序或数据恢复到上一次正确状态(或者是上一个稳定版本)的行为。</p>\n"
                    ],
                    "guid": "Lu$n9<{N@4",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0f4a4a-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "监控告警",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"服务监控\">服务监控</h2>\n",
                        "<p>服务监控主要目的在服务出现问题或者快要出现问题时能够准确快速地发现以减小影响范围。服务监控一般有多种手段，按层次可划分为：</p>\n<p>系统层（CPU、网络状态、IO、机器负载等）<br>应用层（进程状态、错误日志、吞吐量等）<br>业务层（服务/接口的错误码、响应时间）<br>用户层（用户行为、舆情监控、前端埋点）</p>\n"
                    ],
                    "guid": "IyQ1Ihb+)l",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"全链路监控\">全链路监控</h2>\n",
                        "<p>服务拨测：服务拨测是探测服务（应用）可用性的监控方式，通过拨测节点对目标服务进行周期性探测，主要通过可用性和响应时间来度量，拨测节点通常有异地多个。</p>\n<p>节点探测：节点探测是用来发现和追踪不同的机房（数据中心）节点之间网络可用性和通畅性的监控方式，主要通过响应时间、丢包率、跳数来度量，探测方法一般是ping、mtr或其他私有协议。</p>\n<p>告警过滤：对某些可预知的告警进行过滤，不进入告警统计的数据，如少量爬虫访问导致的http响应500错误，业务系统自定义异常信息等。</p>\n<p>告警去重：当一个告警通知负责人后，在这个告警恢复之前，不会继续收到相同的告警。</p>\n<p>告警抑制：为了减少由于系统抖动带来的干扰，还需要实现抑制，例如服务器瞬间高负载，可能是正常的，只有持续一段时间的高负载才需要得到重视。</p>\n<p>告警恢复：开发/运维人员不仅需要收到告警通知，还需要收到故障消除告警恢复正常的通知。</p>\n<p>告警合并：对同一时刻产生的多条相同告警进行合并，如某个微服务集群同一时刻出现多个子服务负载过高的告警，需要合并成为一条告警。</p>\n<p>告警收敛：有时某个告警产生时，往往会伴随着其它告警。这时可以只对根本原因产生告警，其它告警收敛为子告警一并发送通知。如云服务器出现CPU负载告警时往往伴随其搭载的所有系统的可用性告警。</p>\n<p>故障自愈：实时发现告警，预诊断分析，自动恢复故障，并打通周边系统实现整个流程的闭环。</p>\n"
                    ],
                    "guid": "zxga-m0zTk",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0f6836-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "系统开发",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"高内聚低耦合\">高内聚/低耦合</h2>\n",
                        "<p>高内聚指一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一责任原则。模块的内聚反映模块内部联系的紧密程度。</p>\n<p>模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。一个完整的系统，模块与模块之间，尽可能的使其独立存在。通常程序结构中各模块的内聚程度越高，模块间的耦合程度就越低。</p>\n"
                    ],
                    "guid": "jD!Pb|?km`",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"过度设计\">过度设计</h2>\n",
                        "<p>过度设计就是进行了过多的面向未来的设计或者说把相对简单的事情想复杂了，过度追求模块化、可扩展性、设计模式等，为系统增加了不必要的复杂度。</p>\n"
                    ],
                    "guid": "PvS4@V/A`k",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"过早优化\">过早优化</h2>\n",
                        "<p>过早指的不是在开发过程的早期，而是在还没弄清楚需求未来的变化的走向的时候。你的优化不仅可能导致你无法很好地实现新的需求，而且你对优化的预期的猜测有可能还是错的，导致实际上你除了把代码变复杂以外什么都没得到。</p>\n<p>正确的方法是，先有质量地实现你的需求，写够testcase，然后做profile去找到性能的瓶颈，这个时候才做优化。</p>\n"
                    ],
                    "guid": "NY5boU-gN4",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"重构-refactoring\">重构 (Refactoring)</h2>\n",
                        "<p>重构（Refactoring）就是通过调整程序代码改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性。</p>\n"
                    ],
                    "guid": "LAie`d-JK=",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"破窗效应\">破窗效应</h2>\n",
                        "<p>又称破窗理论，破窗效应（Broken windows theory）是犯罪学的一个理论。此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。</p>\n<p>应用在软件工程上就是，一定不能让系统代码或者架构设计的隐患有冒头的机会，否则随着时间的推移，隐患会越来越重。反之，一个本身优质的系统，会让人不由自主的写出优质的代码。</p>\n"
                    ],
                    "guid": "p`!BY4BA1&",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"互不信任原则\">互不信任原则</h2>\n",
                        "<p>指在程序运行上下游的整个链路中，每个点都是不能保证绝对可靠的，任何一个点都可能随时发生故障或者不可预知的行为，包括机器网络、服务本身、依赖环境、输入和请求等，因此要处处设防。</p>\n"
                    ],
                    "guid": "M#f4NT!ZLB",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"持久化-persistence\">持久化 (Persistence)</h2>\n",
                        "<p>持久化是将程序数据在临时状态和持久状态间转换的机制。通俗的讲，就是临时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库或者本地磁盘中，能够长久保存）。</p>\n"
                    ],
                    "guid": "zax~<Z<kJ%",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"临界区\">临界区</h2>\n",
                        "<p>临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用，但是每一次，只能有一个线程使用它，一旦临界区资源被占用，其他线程要想使用这个资源，就必须等待。</p>\n"
                    ],
                    "guid": "Q^k&3eB]d]",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"阻塞非阻塞\">阻塞/非阻塞</h2>\n",
                        "<p>阻塞和非阻塞通常形容多线程间的相互影响。比如一个线程占用了临界区资源，那么其它所有需要这个资源的线程就必须在这个临界区中进行等待，等待会导致线程挂起。这种情况就是阻塞。此时，如果占用资源的线程一直不愿意释放资源，那么其它所有阻塞在这个临界区上的线程都不能工作。而非阻塞允许多个线程同时进入临界区。</p>\n"
                    ],
                    "guid": "Qw:473YkY+",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"同步异步\">同步/异步</h2>\n",
                        "<p>通常同步和异步是指函数/方法调用方面。</p>\n<p>同步就是在发出一个函数调用时，在没有得到结果之前，该调用就不返回。</p>\n<p>异步调用会瞬间返回，但是异步调用瞬间返回并不代表你的任务就完成了，他会在后台起个线程继续进行任务，等任务执行完毕后通过回调callback或其他方式通知调用方。</p>\n"
                    ],
                    "guid": "g<-@6a:k2Y",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"并发并行\">并发/并行</h2>\n",
                        "<p>并行(parallel)指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。</p>\n<p>并发(concurrency)指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p>\n"
                    ],
                    "guid": "EBeb/1P.Cb",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "3f0f8c1c-5969-11ef-b165-dbb8e6df1468",
            "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "_vscodeAnkiPlugin.css"
            ],
            "name": "网络通信",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"连接池\">连接池</h2>\n",
                        "<p>预先建立一个连接缓冲池，并提供一套连接使用、分配、管理策略，使得该连接池中的连接可以得到高效、安全的复用，避免了连接频繁建立、关闭的开销。</p>\n"
                    ],
                    "guid": "s>56I(T~4p",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"断线重连\">断线重连</h2>\n",
                        "<p>由于网络波动造成用户间歇性的断开与服务器的连接，待网络恢复之后服务器尝试将用户连接到上次断开时的状态和数据。</p>\n"
                    ],
                    "guid": "lnC$?)w`m4",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"会话保持\">会话保持</h2>\n",
                        "<p>会话保持是指在负载均衡器上的一种机制，可以识别客户端与服务器之间交互过程的关连性，在作负载均衡的同时还保证一系列相关连的访问请求都会分配到一台机器上。用人话来表述就是：在一次会话过程中发起的多个请求都会落到同一台机器上。</p>\n"
                    ],
                    "guid": "HY([6Dj8{.",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"长连接短连接\">长连接/短连接</h2>\n",
                        "<p>通常是指TCP的长连接和短连接。</p>\n<p>长连接就是建立TCP连接后，一直保持这个连接，一般会中间彼此发送心跳来确认对应的存在，中间会做多次业务数据传输，一般不会主动断开连接。</p>\n<p>短连接一般指建立连接后，执行一次事务后（如：http请求），然后就关掉这个连接。</p>\n"
                    ],
                    "guid": "tfclU~,SV)",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"流量控制拥塞控制\">流量控制/拥塞控制</h2>\n",
                        "<p>流量控制防止发送方发的太快，耗尽接收方的资源，从而使接收方来不及处理。</p>\n<p>拥塞控制防止发送方发的太快，使得网络来不及处理产生拥塞，进而引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿。</p>\n"
                    ],
                    "guid": "n:fXK-omKd",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"惊群效应\">惊群效应</h2>\n",
                        "<p>惊群效应也有人叫做雷鸣群体效应，不过叫什么，简言之，惊群现象就是多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），如果等待的这个事件发生，那么他就会唤醒等待的所有进程（或者线程），但是最终却只可能有一个进程（线程）获得这个时间的“控制权”，对该事件进行处理，而其他进程（线程）获取“控制权”失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。</p>\n"
                    ],
                    "guid": "r<xy{<(/fj",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h2 id=\"nat\">NAT</h2>\n",
                        "<p>NAT（Network Address Translation，网络地址转换），就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。</p>\n"
                    ],
                    "guid": "xs50Qb+(>s",
                    "note_model_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        }
    ],
    "crowdanki_uuid": "3f0e86d2-5969-11ef-b165-dbb8e6df1468",
    "deck_config_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "11d68138-5969-11ef-b165-dbb8e6df1468",
            "desiredRetention": 0.9,
            "dyn": false,
            "fsrsWeights": [],
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 0
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 0
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": false,
            "timer": 0,
            "waitForAudio": false,
            "weightSearch": ""
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "_vscodeAnkiPlugin.css"
    ],
    "name": "技术术语",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "11d25d38-5969-11ef-b165-dbb8e6df1468",
            "css": ".card {\n  font-family: arial;\n  font-size: 16px;\n  text-align: left;\n  color: #000;\n  background-color: #fff;\n  overflow-x: hidden;\n}\npre {\n  text-align: left;\n\toverflow-x: scroll;\n}\nblockquote {\n    text-indent: 0;\n    padding: 6px 12px;\n    background-color: #f8fafc;\n    border-radius: 8px;\n    overflow: hidden;\n    border-left: 8px solid #69f;\n    color: #1c1f21;\n    font-size: 16px;\n}\n\npre code {\n  background-color: #eee;\n  border: 1px solid #999;\n  display: block;\n  padding: 20px;\n  overflow: auto;\n}\ntable,\nth,\ntd {\n  border-bottom: 1.5px solid #ddd;\n  border-collapse: collapse;\n  overflow-x: scroll;\n\tpointer-events: none;\n}\ntable {\n  width: 100%;\n}\ntr:nth-child(even) {\n  background-color: #f2f2f2;\n\tfont-size: 16px;\n}\ntr:nth-child(odd) {\n  background-color: #ffffff;\n}\nth {\n  background-color: #cccccc;\n  color: black;\n  text-align: center;\n  height: 30px;\n  font-size: 16px;\n}\ntr:hover {\n  background-color: #dddddd;\n}\ntr {\n  color: black;\n  text-align: left;\n  height: 30px;\n  font-size: 16px;\n}\nth,\ntd {\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": null,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 16,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": null,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 14,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "BasicWithHighlightVSCode",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "<link rel=\"stylesheet\" href=\"_vscodeAnkiPlugin.css\" />{{Front}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": [],
    "reviewLimit": null,
    "reviewLimitToday": null
}